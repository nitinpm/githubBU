Problem 1:
Write new member functions called
	a. preOrder() that implements the preorder traversal algorithm of a binary search tree. Your member function should display each node’s data on the screen.
	b. inOrder() that implements the inorder traversal algorithm of a binary search tree. Your member function should display each node’s data on the screen.
	c. nodeCount() to count the number of nodes in a binary search tree. In this function, you should use a recursive function. You can’t just use a variable such as “mySize”.




Problem 2:
In this problem, you will write the delete member function to delete a node from a BST. Recall
that to delete a node from a BST you need to consider the three cases that we discussed in class.
	a. The node has no children (easiest case)
	b. The node has only one child (easy case)
	c. The node has two children (hard case)
- As an example consider the following BST. You need to create this BST by inserting these elements from the treetester.cpp file.
- Delete nodes 13, 10 and 3 in order. Every time you delete a node, use the inorder() member function you wrote to show that the BST property is being maintained. Inorder() will print out
the elements of a BST in sorted order.
- Test your code with other BSTs to see if the delete member function is working correctly.




Problem 3:
Modify the provided files and write additional methods to the class and convert the Binary
Search Tree to an AVL tree. Note that the tree should be balanced both after insertion and
deletion.




Problem 4: (15 points)
Implement and test the longest common subsequence (LCS) problem. For this problem, you are
required to maintain a two dimensional arrays for storing the tables. You need to output the LCS
along with the length.